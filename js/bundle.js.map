{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAuD;AACvB;AACM;AACQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wDAAwD,+BAA+B;AACvF;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD,qDAAqD,eAAe;AACpE,oDAAoD,cAAc;AAClE,iDAAiD,WAAW;AAC5D,iDAAiD,WAAW;AAC5D;AACA;AACA,uEAAuE,gBAAgB,EAAE,cAAc;AACvG;AACA,yCAAyC,iBAAiB;AAC1D;AACA,sEAAsE,kBAAkB;AACxF,0DAA0D,UAAU;AACpE,mEAAmE,WAAW;AAC9E,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qDAAO;AAC/B;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB,gDAAM;AAC9B;AACA,wBAAwB,wDAAU;AAClC,wBAAwB,6DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;;;;;AC5KoC;AACvB;AACe;AACQ;AACjB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oDAAoD,+BAA+B;AACnF;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD,iDAAiD,eAAe;AAChE,gDAAgD,cAAc;AAC9D,6CAA6C,WAAW;AACxD,6CAA6C,WAAW;AACxD;AACA;AACA,oEAAoE,gBAAgB,EAAE,cAAc;AACpG;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA,mEAAmE,kBAAkB;AACrF,sDAAsD,UAAU;AAChE,+DAA+D,WAAW;AAC1E,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY,YAAY,UAAU,WAAW,SAAS,QAAQ,MAAM,QAAQ,qBAAqB,UAAU,cAAc,cAAc,SAAS;AACzL;AACA,2CAA2C,YAAY,YAAY,UAAU,mBAAmB,SAAS,QAAQ,MAAM,QAAQ,qBAAqB,UAAU,cAAc,cAAc,SAAS;AACnM;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B,wDAAU;AACtC,4BAA4B,+CAAM;AAClC,4BAA4B,mDAAO;AACnC,4BAA4B,qDAAa;AACzC,4BAA4B,qDAAO;AACnC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA,wCAAwC,yCAAyC;AACjF,wCAAwC,mCAAmC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,IAAI,uBAAuB,IAAI;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChGA;AACuD;AACT;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,6BAA6B;AAC7B;AACA,gCAAgC,8DAAmB;AACnD;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,gCAAgC,wDAAU;AAC1C,6BAA6B;AAC7B,gCAAgC,wDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,wBAAwB,6DAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAU;AACtC,yBAAyB;AACzB,4BAA4B,wDAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChF+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,eAAe;AACnF,oEAAoE,eAAe;AACnF;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,gCAAgC,6DAAmB;AACnD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,oEAAoE,eAAe;AACnF,oEAAoE,eAAe;AACnF;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,gCAAgC,6DAAmB;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;UCvCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;AACA,CAAuD;AACvD,CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,0DAAO;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM,0DAAO;AACb;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD","sources":["webpack://project/./js/modules/addPeople.js","webpack://project/./js/modules/getData.js","webpack://project/./js/modules/pagination.js","webpack://project/./js/modules/search.js","webpack://project/./js/modules/sorting.js","webpack://project/./js/modules/viewDopData.js","webpack://project/webpack/bootstrap","webpack://project/webpack/runtime/define property getters","webpack://project/webpack/runtime/hasOwnProperty shorthand","webpack://project/webpack/runtime/make namespace object","webpack://project/./js/script.js"],"sourcesContent":["import {paginationA as pagination} from './pagination';\r\nimport {search} from './search';\r\nimport {changed} from './viewDopData';\r\nimport {backgroundColorItem} from './getData';\r\n\r\nconst  addBtn = document.querySelector('.btnAdd'),\r\n       dannie = document.querySelector('.dannies');\r\n\r\n       class PeopleDann{\r\n            constructor (id,firstName,lastName,email,phone,streetAdress,city,state,zip,description,...classes){\r\n                    this.id = id,\r\n                    this.firstName = firstName,\r\n                    this.lastName = lastName,\r\n                    this.email = email,\r\n                    this.phone = phone,\r\n                    this.streetAdress = streetAdress,\r\n                    this.city = city,\r\n                    this.state = state,\r\n                    this.zip = zip,\r\n                    this.description = description,\r\n                    this.classes = classes\r\n            }\r\n            render(){\r\n                const item = document.createElement('div');\r\n                if(this.classes.length === 0){\r\n                    item.classList.add('item');\r\n                }else{\r\n                    this.classes.forEach(classNames => {item.classList.add(classNames)})\r\n                }\r\n\r\n                item.innerHTML = `\r\n                            <div class=\"id\">${this.id}</div>\r\n                            <div class=\"firstName\">${this.firstName}</div>\r\n                            <div class=\"lastName\">${this.lastName}</div>\r\n                            <div class=\"email\">${this.email}</div>\r\n                            <div class=\"phone\">${this.phone}</div>\r\n                            \r\n                            <div class=\"dopData\">\r\n                                <div class=\"dop\">Выбран пользователь ${this.firstName} ${this.lastName}</div>\r\n                                <div class=\"dop\">Описание:\r\n                                    <p>${this.description}</p>\r\n                                </div>\r\n                                <div class=\"dop\"> Адресс проживания:${this.streetAdress}</div>\r\n                                <div class=\"dop\">Город: ${this.city}</div>\r\n                                <div class=\"dop\">Провинция/штат: ${this.state}</div>\r\n                                <div class=\"dop\">Индекс: ${this.zip}</div>\r\n                            </div>\r\n\r\n                `;       \r\n                dannie.append(item);\r\n\r\n        }\r\n\r\n    }\r\nfunction addPeople (){\r\n    // добавление человека\r\n        function addFormsPeople (){\r\n            //pagination (Array.from(document.querySelectorAll('.item')));\r\n            const addPeopl = document.createElement('div');\r\n            addPeopl.classList.add('noactiv');\r\n\r\n            addPeopl.innerHTML = `  \r\n                                    <input type=\"text\" class=\"firstName\" placeholder=\"Введите имя\">\r\n                                    <input type=\"text\" class=\"lastName\" placeholder=\"Введите фамилию\">\r\n                                    <input type=\"text\" class=\"email\" placeholder=\"Введите email\">\r\n                                    <input type=\"text\" class=\"phone\" placeholder=\"Введите телефон\">\r\n                                    <input type=\"text\" class=\"description\" placeholder=\"Введите описание\">\r\n                                    <input type=\"text\" class=\"adress\" placeholder=\"Введите адресс\">\r\n                                    <input type=\"text\" class=\"city\" placeholder=\"Введите город\">\r\n                                    <input type=\"text\" class=\"state\" placeholder=\"Введите штат\">\r\n                                    <input type=\"text\" class=\"index\" placeholder=\"Введите почтовый индекс\">\r\n                                    `;\r\n            document.querySelector('.header').before(addPeopl);\r\n\r\n            let buttons = document.createElement('button');\r\n            buttons.style.cssText = `width: 44.8%;`;\r\n            buttons.classList.add('addPeoplenoActiv');\r\n            buttons.textContent = `Добавить человека`;\r\n            addPeopl.append(buttons);\r\n            buttons.disabled = true;     \r\n            \r\n            // активность кнопки \"Добавить\"\r\n            \r\n            function validates(){   \r\n                let inputs = [].slice.call(addPeopl.querySelectorAll('input[type=\"text\"]'));\r\n                \r\n                inputs.forEach(el=>{\r\n                    el.addEventListener('input',checkInputs);\r\n                })\r\n                function checkInputs(){\r\n                    let empty = inputs.filter(el=>{\r\n                        return  el.value.trim() === '';\r\n                    }).length;\r\n                    //buttons.disabled = empty !== 0;\r\n                    if(empty == 0){\r\n                        buttons.disabled = 0;\r\n                        buttons.classList.remove('addPeoplenoActiv');\r\n                        buttons.addEventListener('mouseover',()=>{\r\n                            buttons.classList.add('hover');\r\n                        });\r\n                        buttons.addEventListener('mouseout',()=>{\r\n                            buttons.classList.remove('hover');\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n            }\r\n           validates();\r\n            buttons.addEventListener('click',()=>{\r\n                let items = Array.from(document.querySelectorAll('.item'));\r\n                let lastIndex = 0;\r\n                items.forEach(item=>{\r\n                    item.childNodes.forEach(div=>{\r\n                        if(div.className == \"id\"  ){\r\n                            lastIndex = Math.max(lastIndex,+div.innerText);\r\n                        }\r\n                    })\r\n                \r\n                })  \r\n                const id = lastIndex +1,\r\n                    firstName = addPeopl.querySelector('.firstName').value,\r\n                    lastName = addPeopl.querySelector('.lastName').value,\r\n                    email = addPeopl.querySelector('.email').value,\r\n                    phone = addPeopl.querySelector('.phone').value, \r\n                    description = addPeopl.querySelector('.description').value,\r\n                    adress = addPeopl.querySelector('.adress').value,\r\n                    city = addPeopl.querySelector('.city').value,\r\n                    state = addPeopl.querySelector('.state').value,\r\n                    index = addPeopl.querySelector('.index').value;\r\n                \r\n                    new PeopleDann(id,\r\n                        firstName,\r\n                        lastName,\r\n                        email,\r\n                        phone,\r\n                        adress,\r\n                        city,\r\n                        state,\r\n                        index,\r\n                        description,\r\n                        'item').render();\r\n\r\n                        changed();\r\n                        Array.from(addPeopl.querySelectorAll('input[type=\"text\"]')).forEach( item =>{\r\n                            item.value = '';\r\n                        })\r\n                        //filtered(Array.from(document.querySelectorAll('.item')));\r\n                        search();\r\n                        document.querySelector('.indic').innerHTML='';\r\n                        pagination (Array.from(document.querySelectorAll('.item'))); \r\n                        backgroundColorItem(Array.from(document.querySelectorAll('.item')));\r\n                        buttons.disabled = true;\r\n                        if(buttons.classList.contains('hover')){\r\n                            buttons.classList.remove('hover'); \r\n                            buttons.classList.add('addPeoplenoActiv');\r\n                        }\r\n            });\r\n            \r\n            addBtn.addEventListener('click',()=>{\r\n                if(addPeopl.classList.contains('noactiv')){\r\n                    addPeopl.classList.remove('noactiv');\r\n                    addPeopl.classList.add('addforms');\r\n                }else{\r\n                    addPeopl.classList.remove('addforms');\r\n                    addPeopl.classList.add('noactiv');\r\n                }\r\n            })\r\n\r\n    }\r\n    addFormsPeople ();\r\n}\r\n\r\nexport {addPeople};\r\n","import {paginationA as pagination} from './pagination';\r\nimport {search} from './search';\r\nimport {sortingaA as sorting} from './sorting';\r\nimport {addPeople as addFormPeople} from './addPeople';\r\nimport {changed} from './viewDopData';\r\n\r\nconst  dannie = document.querySelector('.dannies'),\r\n        wrap = document.querySelector('.wrap'),\r\n        dop = document.querySelector('.dop');\r\nfunction backgroundColorItem(item){\r\n    item.forEach((elements,i)=>{\r\n        if(i % 2 == 0){\r\n            elements.style.background = `#87CEEB`;\r\n        }else{\r\n            elements.style.background = `#ADD8E6`;\r\n        }\r\n    })\r\n} \r\n\r\nfunction getDateA(types){\r\n// создание класса для персонажа\r\n    class PeopleDann{\r\n        constructor (id,firstName,lastName,email,phone,streetAdress,city,state,zip,description,...classes){\r\n                this.id = id,\r\n                this.firstName = firstName,\r\n                this.lastName = lastName,\r\n                this.email = email,\r\n                this.phone = phone,\r\n                this.streetAdress = streetAdress,\r\n                this.city = city,\r\n                this.state = state,\r\n                this.zip = zip,\r\n                this.description = description,\r\n                this.classes = classes\r\n        }\r\n        render(){\r\n            const item = document.createElement('div');\r\n            if(this.classes.length === 0){\r\n                item.classList.add('item');\r\n            }else{\r\n                this.classes.forEach(classNames => {item.classList.add(classNames)})\r\n            }\r\n\r\n            item.innerHTML = `\r\n                        <div class=\"id\">${this.id}</div>\r\n                        <div class=\"firstName\">${this.firstName}</div>\r\n                        <div class=\"lastName\">${this.lastName}</div>\r\n                        <div class=\"email\">${this.email}</div>\r\n                        <div class=\"phone\">${this.phone}</div>\r\n                        \r\n                        <div class=\"dopData\">\r\n                            <div class=\"dop\">Выбран пользователь: ${this.firstName} ${this.lastName}</div>\r\n                            <p> <div class=\"dop\">\r\n                                <p> Описание: <br> ${this.description}</p>\r\n                            </div>\r\n                            </p>\r\n                            <div class=\"dop\"> Адресс проживания: ${this.streetAdress}</div>\r\n                            <div class=\"dop\">Город: ${this.city}</div>\r\n                            <div class=\"dop\">Провинция/штат: ${this.state}</div>\r\n                            <div class=\"dop\">Индекс: ${this.zip}</div>\r\n                        </div>\r\n\r\n            `;       \r\n             dannie.append(item);\r\n\r\n       }\r\n\r\n    }\r\n\r\n\r\n    // получение данных с сервера и добавление данных в таблицу\r\n    const getData = async (type)=>{\r\n        const miniDataSet =\r\n\t\t\t'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\t\tconst bigDataSet =\r\n\t\t\t'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\t\tlet url = '';\r\n\r\n\t\tif (type === 'min') {\r\n\t\t\turl = miniDataSet;\r\n\t\t} else if (type === 'big') {\r\n\t\t\turl = bigDataSet;\r\n\t\t}\r\n        const getResourse = async (url) => {\r\n            const res = await fetch(url);\r\n\r\n            const reader = res.body.getReader();\r\n            const contentLength =  +res.headers.get('Content-Length');\r\n\r\n            let receivedLength = 0;   \r\n            let chunks = [];\r\n            let imgLoad = document.createElement('img');\r\n            imgLoad.src = 'img/spinner.svg';\r\n            imgLoad.style.cssText = `\r\n                                    width:200px;\r\n                                    height:200px;\r\n                                    margin-top:10%;\r\n                                    margin-left:40%;\r\n                                    margin-right:40%;\r\n                                    `\r\n            dannie.prepend(imgLoad);\r\n\r\n            while(true) {\r\n                const {done, value} = await reader.read();\r\n            \r\n                if (done) {\r\n                    dannie.removeChild(imgLoad);\r\n                break;\r\n                }\r\n                \r\n                chunks.push(value);\r\n                receivedLength += value.length;\r\n            }\r\n\r\n            if(!res.ok){\r\n                throw new Error(`Ошибка ${res.status}`)\r\n            }\r\n            let chunksAll = new Uint8Array(receivedLength);\r\n                let position = 0;\r\n                for(let chunk of chunks) {\r\n                    chunksAll.set(chunk, position);\r\n                    position += chunk.length;\r\n                }\r\n                let result = new TextDecoder(\"utf-8\").decode(chunksAll);\r\n\r\n            let commits = JSON.parse(result);\r\n            return commits;\r\n            \r\n        }   \r\n        const dannies = async (url) => {\r\n            await getResourse(url)\r\n                        .then(data => {\r\n                            data.forEach(item=>{\r\n                                new PeopleDann(item.id,\r\n                                               item.firstName,\r\n                                               item.lastName,\r\n                                               item.email,\r\n                                               item.phone,\r\n                                               item.address.streetAddress,\r\n                                               item.address.city,\r\n                                               item.address.state,\r\n                                               item.address.zip,\r\n                                               item.description,\r\n                                               'item').render();\r\n                                })\r\n                            return dannie;\r\n                        })\r\n                        .then(dannie => {\r\n                            let item = Array.from(document.querySelectorAll('.item'));\r\n                            backgroundColorItem(item);\r\n                            pagination();\r\n                            search();\r\n                            sorting();\r\n                            addFormPeople();  \r\n                            changed();\r\n                        }); \r\n        }\r\n    \r\n        const header = document.createElement('div');\r\n        header.innerHTML = `\r\n                    <div class=\"items\">\r\n                        <div class=\"id\">id</div>\r\n                        <div class=\"firstName\">Имя</div>\r\n                        <div class=\"lastName\">Фамилия</div>\r\n                        <div class=\"email\">email</div>\r\n                        <div class=\"phone\">телефон</div>\r\n                    </div>\r\n        `;\r\n        header.classList.add('header');\r\n        wrap.prepend(header);\r\n        await dannies(url);\r\n\r\n    }\r\n    getData(types);\r\n}\r\n\r\nexport {getDateA, backgroundColorItem};","function paginationA(){\r\n\r\n    const dannie = document.querySelector('.dannies'),\r\n          inner= document.querySelector('.inner_dans'),\r\n          date = document.querySelector('.date');\r\n\r\n        // пагинация для страничного режима\r\n        function pagination (items){\r\n                let n = 0;\r\n                if(items.length < 50){\r\n                    return;\r\n                }else{\r\n                    n = 50;\r\n                }\r\n            const quantityElemStr = n, // кол-во элементов на странице\r\n                heightOne = +window.getComputedStyle(items[1]).height.match(/\\d/g).join(''),  // ширина одного блока\r\n                lenght = Math.ceil(items.length/quantityElemStr);   // сколько страниц  мы хотим видеть;  \r\n\r\n\r\n                date.style.height =  `${(heightOne + 14) * quantityElemStr + 300}px`;\r\n                inner.style.height = `${(heightOne + 15) * quantityElemStr}px`,\r\n                dannie.style.height = 100 * lenght + '%';\r\n                inner.style.overflow = 'hidden';\r\n\r\n                let height= window.getComputedStyle(inner).height;\r\n\r\n            let index = 1;\r\n            let offset = 0;\r\n\r\n            const indicators = document.createElement('ol');\r\n            let square = [];\r\n\r\n            items.forEach(itemElement=>{\r\n                itemElement.style.height = `${heightOne}px`;\r\n            })\r\n\r\n            indicators.classList.add('indicators_carousel');\r\n            indicators.style.cssText = `\r\n                                        padding-inline-start: 0px;\r\n                                        bottom:0%;\r\n                                        left:0;\r\n                                        z-index:15;\r\n                                        display:flex;\r\n                                        justify-content:left;\r\n                                        margin-top:10px;\r\n                                        list-style:none;\r\n            `;\r\n            document.querySelector('.indic').append(indicators);\r\n            for(let i = 0; i < lenght; i++){\r\n                const dot = document.createElement('li');\r\n                dot.classList.add('dot');\r\n                dot.setAttribute('data-slide-to',i+1);\r\n                dot.style.cssText=`\r\n                                    box-sizing:content-box;\r\n                                    flex: 0 1 auto;\r\n                                    width:30px;\r\n                                    height:30px;\r\n                                    margin: 0 3px;\r\n                                    cursor:pointer;\r\n                                    background-color:#000000;\r\n                                    background-clip: padding-box;\r\n                                    opacity: 0.5;\r\n                                    color:#fff;\r\n                                    text-align:center;\r\n                                    \r\n                `;\r\n                if(i==0){\r\n                    dot.style.opacity = 1;\r\n                }               \r\n                dot.innerHTML = `<div data-slide-to=\"${i+1}\" class=\"textNumber\">${i+1}</div>`\r\n                indicators.append(dot);\r\n                square.push(dot);\r\n\r\n            }\r\n\r\n            function dotActiv (){\r\n                square.forEach(elem => {\r\n                    elem.style.opacity = '0.5';\r\n                    square[index-1].style.opacity = '1';\r\n                    \r\n                });\r\n            }   \r\n\r\n            square.forEach(elem =>{\r\n                elem.addEventListener('click',(e)=>{\r\n                    const slideTo = e.target.getAttribute('data-slide-to');\r\n                    index=slideTo;\r\n                    offset = +height.slice(0,height.length-2)*(slideTo-1);\r\n                    dannie.style.transform = `translateY(-${offset}px)`;\r\n                    dotActiv();\r\n                })\r\n            })\r\n        }\r\n\r\n        pagination(Array.from(document.querySelectorAll('.item')));\r\n}\r\n\r\nexport {paginationA};","//const pagination = require('./pagination');\r\nimport {paginationA as pagination} from './pagination';\r\nimport {backgroundColorItem} from './getData';\r\n\r\n    function search(){      \r\n            const dop = document.querySelector('.dop');\r\n\r\n            //поиск по содержимому (фильтрация)\r\n            function filtered (item){\r\n                const tabl = document.querySelector('.dannies');\r\n                const btn = document.querySelector('.btn2'),\r\n                    inp = document.querySelector('.inp');\r\n                let masSearch = [],\r\n                    masAllItem = item;\r\n                let func = ()=>{\r\n                    let inpValue = inp.value;\r\n                    let regexp = RegExp(inpValue, \"gi\");\r\n                    masAllItem.forEach(item=>{\r\n                                item.childNodes.forEach(divs=>{\r\n                                    if(divs.nodeName !== \"#text\"){\r\n                                        if(inpValue == divs.innerText.match(regexp)){\r\n                                            masSearch.push(item); \r\n                                        }\r\n                                        else{\r\n                                            try{\r\n                                            tabl.removeChild(item); \r\n                                            }\r\n                                            catch(err){\r\n                                            \r\n                                            }\r\n                                        }\r\n                                    }\r\n                                })\r\n                            })\r\n                        if(inpValue == '' || inpValue == null){\r\n\r\n                            let promise = new Promise((resolve)=>{\r\n                                masAllItem.sort((a,b)=>{\r\n                                    let idA = a.querySelector('.id').innerText;\r\n                                    let idB = b.querySelector('.id').innerText;\r\n                                    return idA - idB;\r\n                               })\r\n                               resolve( masAllItem);\r\n                            })\r\n                            promise.then( masAllItem =>{\r\n                                backgroundColorItem(masAllItem);\r\n                                tabl.append(...masAllItem);\r\n                            })  \r\n\r\n                            tabl.append(...masAllItem);\r\n                            try{\r\n                                document.querySelector('.indic').innerHTML='';\r\n                                pagination (masAllItem);\r\n                            }catch{\r\n                                pagination (masAllItem);\r\n                            }\r\n                        }\r\n                        //удаляем повторяющиеся элементы в массиве т.к. элементы повторяются\r\n                        // если есть несколько вхождений в строку несколько раз в разных блоках\r\n                        masSearch = masSearch.filter((item, index) => {\r\n                        return masSearch.indexOf(item) === index;\r\n                        });\r\n                        backgroundColorItem(masSearch);\r\n                        tabl.append(...masSearch);\r\n\r\n                    if(masSearch.length !==0 ){\r\n                        try{\r\n                            document.querySelector('.indic').innerHTML='';\r\n                            pagination (Array.from(document.querySelectorAll('.item')));\r\n                        }catch{\r\n                            pagination (Array.from(document.querySelectorAll('.item')));\r\n                        } \r\n                    }   \r\n                }\r\n                // btn.removeEventListener('click',func);\r\n                btn.addEventListener('click',func);\r\n            }    \r\n\r\n        filtered (Array.from(document.querySelectorAll('.item')));     \r\n    }\r\n\r\nexport {search};","import { backgroundColorItem} from './getData';\r\nfunction sortingaA(){\r\n\r\n    const dannie = document.querySelector('.dannies');\r\n\r\n\r\n// сортировка таблицы по значениям в столбцах с добавлением стрелок\r\n    let sortingClass = 0;\r\n\r\n    function sorting (){ \r\n            const header = document.querySelector('.items').childNodes;\r\n            const head = [];\r\n            header.forEach(item =>{\r\n                if(item.nodeName !== \"#text\" ){\r\n                    head.push(item);\r\n                }\r\n            })\r\n            \r\n                head.forEach(item => {\r\n                        \r\n                        item.addEventListener('click',(e)=>{\r\n                        \r\n                            const items =  Array.from(document.querySelectorAll('.item'));\r\n                            const mas = [];\r\n                            let parent = items[0].parentNode;\r\n                            for(let i = 0; i< items.length; i++){\r\n                                mas.push(parent.removeChild(items[i]));\r\n                            }\r\n                            removeclass(); \r\n                            let up = document.createElement('img');\r\n                                up.classList.add('img');\r\n                                up.style.cssText = `padding: 0px 2px;`\r\n                                item.append(up);\r\n                                up.setAttribute('src','img/0.gif');\r\n\r\n                            if(sortingClass !== item.className){\r\n                                \r\n                                mas.sort(function(a,b){\r\n                                    let textA = a.querySelector(`.${item.className}`).innerText;\r\n                                    let textB = b.querySelector(`.${item.className}`).innerText;\r\n                                    if(item.className === 'id'){\r\n                                        return textA -textB; \r\n                                    }else{\r\n                                        if(textA < textB){\r\n                                            return -1;\r\n                                        }\r\n                                        if(textA > textB){\r\n                                            return 1;\r\n                                        }\r\n                                        return 0;\r\n                                    }\r\n                                    \r\n                                });\r\n\r\n                                dannie.append(...mas);\r\n                                backgroundColorItem(mas);\r\n                                up.setAttribute('src','img/0.gif');\r\n                                sortingClass = item.className;\r\n                                \r\n                            }else{\r\n\r\n                                mas.sort(function(a,b){\r\n                                    let textA = a.querySelector(`.${item.className}`).innerText;\r\n                                    let textB = b.querySelector(`.${item.className}`).innerText;\r\n                                    if(item.className === 'id'){\r\n                                        return textB -textA; \r\n                                    }else{\r\n                                        if(textB < textA){\r\n                                            return -1;\r\n                                        }\r\n                                        if(textB > textA){\r\n                                            return 1;\r\n                                        }\r\n                                        return 0;\r\n                                    }\r\n                                    \r\n                                });\r\n                                dannie.append(...mas);\r\n                                backgroundColorItem(mas);\r\n                                up.setAttribute('src','img/1.gif');\r\n                                sortingClass = 0;   \r\n                            }\r\n                            \r\n                                \r\n                        })  \r\n                }) \r\n            function removeclass(){\r\n                head.forEach(item => {\r\n                    if(item.childNodes[1] != null){\r\n                        if(item.childNodes[1].nodeName === \"IMG\"){\r\n                            item.removeChild(item.childNodes[1]);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n    }\r\n    sorting ();\r\n\r\n}\r\n\r\n//module.exports = sortingaA;\r\n\r\nexport {sortingaA};"," const dop = document.querySelector('.dop');   \r\n    // высвечивание доп данных строки таблицы\r\n    function changed (){\r\n        let ind = 0;\r\n        let items = Array.from(document.querySelectorAll('.item'));\r\n        items.forEach((item,index)=>{\r\n            item.addEventListener('click',(e)=>{\r\n                item.classList.remove(\"activPeople\"); \r\n                let dopDate = item.querySelector('.dopData');\r\n                dop.innerHTML = dopDate.innerHTML;\r\n                if( ind != index){\r\n                    items.forEach(item1=>{\r\n                        item1.classList.remove(\"activPeople\");\r\n                        item.classList.add(\"activPeople\"); \r\n                    });\r\n                    ind = index;\r\n                    if(!dop.classList.contains(\"activ\")){\r\n                        dop.classList.remove(\"noactiv\");\r\n                        dop.classList.add(\"activ\");\r\n\r\n                        item.classList.add(\"activPeople\");\r\n                    }\r\n                }else{\r\n                    if(dop.classList.contains(\"activ\")){\r\n                        dop.classList.remove(\"activ\");\r\n                        dop.classList.add(\"noactiv\");\r\n\r\n                        item.classList.remove(\"activPeople\");\r\n                    }else{\r\n                        dop.classList.remove(\"noactiv\");\r\n                        dop.classList.add(\"activ\");\r\n\r\n                        item.classList.add(\"activPeople\");\r\n                    }\r\n                }\r\n                \r\n            })\r\n        })\r\n    } \r\n    \r\nexport{changed};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\n import {getDateA as getData} from './modules/getData';\r\n import {search} from './modules/search';\r\n\r\nwindow.addEventListener('DOMContentLoaded',()=>{\r\n    const  btnMinData = document.querySelector('.btn'),\r\n          dannie = document.querySelector('.dannies'),\r\n          wrap = document.querySelector('.wrap'),\r\n          btnBigData = document.querySelector('.btnBigData');\r\n\r\n\r\n    search();\r\n\r\n\r\n    const buttons = document.querySelectorAll('button');\r\n    buttons.forEach(element => {\r\n      \r\n        element.addEventListener('mouseover',()=>{\r\n          element.classList.add('hover');\r\n        });\r\n        element.addEventListener('mouseout',()=>{\r\n          element.classList.remove('hover');\r\n        });\r\n    });\r\n\r\n\r\n    function clearData(){\r\n          wrap.innerHTML='';\r\n          dannie.innerHTML='';\r\n          document.querySelector('.indic').innerHTML='';\r\n    }\r\n    function disabled(){\r\n      btnBigData.disabled = true;\r\n      btnMinData.disabled = true;\r\n      btnMinData.classList.add('noactivBtn');\r\n      btnBigData.classList.add('noactivBtn');\r\n    }\r\n    let type = 0;\r\n    btnMinData.addEventListener('click',()=>{\r\n      clearData();\r\n      type = 'min';\r\n      getData(type);\r\n      disabled();\r\n      if(btnMinData.classList.contains('hover')){\r\n        btnMinData.classList.remove('hover');\r\n      }\r\n    });\r\n    btnBigData.addEventListener('click',()=>{ \r\n      clearData();\r\n      type = 'big';\r\n      getData(type);\r\n      disabled();\r\n      if(btnBigData.classList.contains('hover')){\r\n        btnBigData.classList.remove('hover');\r\n      }\r\n    });\r\n})\r\n\r\n"],"names":[],"sourceRoot":""}